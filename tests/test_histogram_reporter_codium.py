"""
This file was auto-generated by CodiumAI (https://codium.ai).
"""
# test_histogram_reporter.py

import unittest
from io import StringIO
from unittest.mock import patch

import pytest

from src.histogram_reporter import HistogramReporter

"""
Code Analysis:
-- Initializes a HistogramReporter object with two parameters: top_n and symbol
- top_n is the number of most common elements to be reported
- symbol is the character used to represent the frequency of each element
- process() takes in a variable number of paths as parameters
- Reads the text from each path and replaces newline characters with empty strings
- Updates the histogram with the tokens from the text
- Prints the most common elements in the histogram, up to the top_n parameter, using the symbol parameter to represent the frequency of each element
"""


"""
Test strategies:
-- test_init(): tests that the HistogramReporter object is initialized correctly with the given parameters
- test_process_empty_paths(): tests that the process() method works correctly when given no paths
- test_process_single_path(): tests that the process() method works correctly when given a single path
- test_process_multiple_paths(): tests that the process() method works correctly when given multiple paths
- test_process_invalid_path(): tests that the process() method raises an error when given an invalid path
- test_process_empty_file(): tests that the process() method works correctly when given a path to an empty file
- test_process_non_text_file(): tests that the process() method raises an error when given a path to a non-text file
- test_process_top_n(): tests that the process() method prints the correct number of elements when given a top_n parameter
- test_process_symbol(): tests that the process() method prints the correct symbol when given a symbol parameter
- test_real_data(): tests that the process() method works correctly when given the ../resources/sample_data.txt file and prints the expected histogram
"""


@pytest.mark.skip(reason="Not working, only a demo")
class TestHistogramReporter(unittest.TestCase):

    def setUp(self):
        self.hr = HistogramReporter()

    def test_init(self):
        hr = HistogramReporter(top_n=5, symbol='@')
        self.assertEqual(hr.top_n, 5)
        self.assertEqual(hr.symbol, '@')

    def test_process_empty_paths(self):
        self.hr.process()
        self.assertEqual(self.hr.top_n, 10)
        self.assertEqual(self.hr.symbol, '#')

    def test_process_single_path(self):
        self.hr.process('../resources/sample_data.txt')
        self.assertEqual(self.hr.top_n, 10)
        self.assertEqual(self.hr.symbol, '#')

    def test_process_multiple_paths(self):
        self.hr.process('../resources/sample_data.txt', 'sample_data2.txt')
        self.assertEqual(self.hr.top_n, 10)
        self.assertEqual(self.hr.symbol, '#')

    def test_process_invalid_path(self):
        with self.assertRaises(FileNotFoundError):
            self.hr.process('invalid_path.txt')

    def test_process_empty_file(self):
        self.hr.process('empty_file.txt')
        self.assertEqual(self.hr.top_n, 10)
        self.assertEqual(self.hr.symbol, '#')

    def test_process_non_text_file(self):
        with self.assertRaises(UnicodeDecodeError):
            self.hr.process('non_text_file.jpg')

    def test_process_top_n(self):
        hr = HistogramReporter(top_n=5)
        hr.process('../resources/sample_data.txt')
        self.assertEqual(hr.top_n, 5)
        self.assertEqual(hr.symbol, '#')

    def test_process_symbol(self):
        hr = HistogramReporter(symbol='@')
        hr.process('../resources/sample_data.txt')
        self.assertEqual(hr.top_n, 10)
        self.assertEqual(hr.symbol, '@')

    def test_real_data(self):
        expected = ['e: ####', 't: ###', 'a: ##', 'o: ##', 'i: ##', 'n: ##', 's: ##', 'h: #', 'r: #', 'd: #']
        with patch('sys.stdout', new=StringIO()) as fakeOutput:
            self.hr.process('../resources/sample_data.txt')
            output = fakeOutput.getvalue().strip().split('\n')
            self.assertListEqual(output, expected)
